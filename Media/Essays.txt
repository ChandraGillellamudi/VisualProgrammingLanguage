Tell us about the features and technologies you used in your Swift playground.
A core goal of this playground was to create a visual programming language that assembles to executable Swift code and can be written almost exclusively with an Apple Pencil or one's finger. In order to do this, I needed to use CoreML models to recognize handwritten characters and Vision to break apart large chunks of text into individual characters. Two different models were used: an alphanumeric model based on the NIST Special Dataset #19 and a digit model using the famous MNIST digit dataset. The alphanumeric dataset enabled me to create shortcuts by drawing a letter corresponding to each node where the user wants to add it. For example, instead of typing "if { } else { }" on a keyboard, this playground allows the user to draw "I" and will automatically create an `If` node.
Additionally, writing string or integer literals with a touchscreen keyboard can be tedious. In order to remedy this issue, I created inline views for the `Integer` and `String Constant` nodes that utilize Vision to break apart strings written on the touchscreen and feed the individual characters to the CoreML models in order to determine what the user wrote.
Like many other iOS applications, UIKit has been a vital component of developing the playground. `NSAttributedString` enabled me to create a simple Swift syntax highlighter in a few lines of code and `UIGestureRecognizers` enabled many different complex gestures without conflicts. Most importantly, this project relied heavily on Auto Layout's flexible constraints and `UIStackViews` in order to easily render many diverse different types of nodes cleanly. Additionally, Core Graphics and Core Image was used heavily in order to process images before feeding them to the CoreML models.

In what ways have you considered sharing your coding knowledge and enthusiasm for computer science with others?
Having grown up in a small retirement community without any peers that share my passion for programming, I jump at every chance to help another person learn to program. In Junior year in High School, I had the opportunity to help teach AP Computer Science where I could create and present my own lectures to the class in a way that would help them understand the content better.
Within the last year, I've started developing and publishing multiplayer games that anyone in the world can play. Ever since the community around these games started growing, I've ran across many young gamers who have taken an interest in programming yet don't have the resources or connections to begin learning. Having been in the same situation myself and understanding how frustrating it is, I make sure to devote whatever time I need to help these students in any way I can. Between when I started making games last year to today, I have helped two students publish their own games they developed by answering questions about programming, helping them understand how I develop aspects of my games, and helping pay for server fees to get them off the ground. I've learned that the only thing more gratifying than releasing your own product is helping other individuals grow in any way you can and helping them succeed alongside yourself.

Is there anything else you would like us to know?
Some of the callouts in the playground are not formatting properly, so I will file a bug report after I finish submitting this. If you see formatting issues in anyone else's playgrounds, it's probably not their fault.
